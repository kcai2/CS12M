head	1.22;
access;
symbols;
locks;
comment	@ * @;


1.22
date	2015.02.11.21.25.54;	author -;	state -;
branches;
next	1.21;

1.21
date	2015.02.11.21.02.59;	author -;	state -;
branches;
next	1.20;

1.20
date	2015.02.11.21.00.34;	author -;	state -;
branches;
next	1.19;

1.19
date	2015.02.11.20.56.40;	author -;	state -;
branches;
next	1.18;

1.18
date	2015.02.11.20.54.28;	author -;	state -;
branches;
next	1.17;

1.17
date	2015.02.11.20.53.58;	author -;	state -;
branches;
next	1.16;

1.16
date	2015.02.11.20.49.52;	author -;	state -;
branches;
next	1.15;

1.15
date	2015.02.11.20.49.35;	author -;	state -;
branches;
next	1.14;

1.14
date	2015.02.11.20.46.06;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.02.11.20.38.02;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.02.11.20.37.06;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.02.11.20.34.44;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.02.11.04.00.07;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.02.11.00.05.02;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.02.11.00.03.40;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.11.00.02.43;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.02.11.00.00.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.10.23.58.24;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.10.23.54.45;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.10.23.44.45;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.10.23.44.22;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.10.23.36.31;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@// $Id$
// Author: Kevin Cai (kcai2@@ucsc.edu)

#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head = NULL;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }

   for (node *curr = head; curr != NULL;) {
      node *temp = curr;
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
      curr = curr->link;
      free(temp);
   }
   return EXIT_SUCCESS;
}
@


1.21
log
@-
@
text
@d1 2
a2 1
// $Id: list4.c,v 1.20 2015-02-11 13:00:34-08 - - $
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.19 2015-02-11 12:56:40-08 - - $
d23 1
a23 1
   for (node *curr = head; curr->link != NULL;) {
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.18 2015-02-11 12:54:28-08 - - $
d30 1
a30 1
   return 0;
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.17 2015-02-11 12:53:58-08 - - $
d27 1
a27 1
      curr = curr->link
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.16 2015-02-11 12:49:52-08 - - $
d24 1
a24 1
      node *temp;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.15 2015-02-11 12:49:35-08 - - $
d23 2
a24 1
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
d27 2
a28 2
      head = curr->link;
      free(curr);
a29 1
   free(head);
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.14 2015-02-11 12:46:06-08 - - $
d29 1
a29 1
   //free(head);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.13 2015-02-11 12:38:02-08 - - $
a22 1
   //node* temp = NULL;
d29 1
a29 1
   free(head);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.12 2015-02-11 12:37:06-08 - - $
d23 2
a24 2
   node* temp = NULL;
   for (node *curr = head; curr->link != NULL; curr=temp->link) {
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.11 2015-02-11 12:34:44-08 - - $
d31 1
a31 1
   return 9;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.10 2015-02-10 20:00:07-08 - - $
d30 1
a30 1
   free(head;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.9 2015-02-10 16:05:02-08 - - $
d24 1
a24 1
   for (node *curr = head; curr->link != NULL; curr = head) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.8 2015-02-10 16:03:40-08 - - $
d14 1
a14 1
   node *head=NULL;
d24 1
a24 1
   for (node *curr = head; curr->link != NULL; curr = temp->link) {
d27 1
a27 1
      temp = curr;
d30 1
a30 1
   free(temp);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.7 2015-02-10 16:02:43-08 - - $
a21 1
   delete head;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.6 2015-02-10 16:00:06-08 - - $
d22 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.5 2015-02-10 15:58:24-08 - - $
a21 1
   free(node);
d24 1
a24 1
   for (node *curr = head; curr->link != NULL; curr  = temp->link) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.4 2015-02-10 15:54:45-08 - - $
d22 2
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.3 2015-02-10 15:44:45-08 - - $
d22 2
a23 1
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
d26 2
d29 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.2 2015-02-10 15:44:22-08 - - $
a20 1
      free(node);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.1 2015-02-10 15:36:31-08 - - $
d21 1
a21 1
      free(curr);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.1 2015-02-10 15:31:17-08 - - $
d21 1
a21 1
      free(node);
@
